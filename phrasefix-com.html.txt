<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Cosign</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.8.0/math.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #282c34;
            color: #e0e0e0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            margin: 0;
            padding: 10px;
            box-sizing: border-box;
            overscroll-behavior-y: contain; 
        }
        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 900px;
            background-color: #3a3f47;
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.3);
            position: relative;
        }
        .header-info {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-bottom: 20px;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        .score-display, .target-info-placeholder {
            background-color: #4f555e;
            padding: 10px 15px;
            border-radius: 10px;
            font-size: 0.8em;
            font-weight: normal;
            text-align: center;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
            line-height: 1.4;
            transition: transform 0.2s ease, color 0.2s ease;
        }
        .score-display.updated {
            transform: scale(1.1);
            color: #86de74; 
        }
        .target-info-placeholder {
             font-size: 0.7em;
             padding: 8px 10px;
        }

        .plots-main-area {
            display: flex;
            width: 100%;
            justify-content: space-between;
            align-items: flex-start;
            gap: 20px;
            margin-bottom: 20px;
        }

        .main-plot-wrapper {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-width: 0;
        }
        
        .main-plot-wrapper canvas {
            background-color: #2c2c2c;
            border: 1px solid #555;
            border-radius: 12px;
            width: 100%;
            height: auto;
            aspect-ratio: 1.6 / 1;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: transform 0.3s ease-out;
        }
        .main-plot-wrapper canvas.new-plot-anim {
            transform: scale(1.03);
        }


        .controls-panel {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 12px;
            width: 240px;
            flex-shrink: 0;
        }
        
        .target-plot-overlay {
            display: none; 
            position: absolute; 
            top: 60px; 
            right: 15px;
            width: 90px; 
            height: 90px;
            background-color: rgba(60, 65, 75, 0.9); 
            border: 2px solid #888; 
            border-radius: 10px;
            z-index: 1000; 
            box-shadow: 0 4px 12px rgba(0,0,0,0.5); 
            padding: 5px;
            box-sizing: border-box;
        }
        .target-plot-overlay canvas {
            width: 100%;
            height: 100%;
            border-radius: 8px;
            background-color: #2c2c2c;
            transition: transform 0.3s ease-out;
        }
        .target-plot-overlay canvas.new-plot-anim {
            transform: scale(1.1);
        }

        .target-plot-desktop-wrapper {
            width: 100%;
        }
        .target-plot-desktop-wrapper canvas {
            background-color: #2c2c2c;
            border: 1px solid #555;
            border-radius: 10px;
            width: 100%;
            height: auto;
            aspect-ratio: 1 / 1;
            box-shadow: 0 2px 4px rgba(0,0,0,0.15);
            transition: transform 0.3s ease-out;
        }
        .target-plot-desktop-wrapper canvas.new-plot-anim {
            transform: scale(1.05);
        }
        
        .current-function-display {
            background-color: #2c2c2c;
            color: #86de74;
            padding: 10px;
            border-radius: 10px;
            width: 100%;
            min-height: 40px;
            box-sizing: border-box;
            text-align: center;
            font-family: 'Press Start 2P', cursive;
            font-size: 0.75em;
            word-wrap: break-word;
            border: 1px solid #555;
            overflow-x: auto;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
            line-height: 1.5;
        }

        .controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            gap: 8px;
            width: 100%;
            margin-bottom: 8px;
        }

        .controls button, .submit-button, .new-puzzle-button, .clear-button {
            background-image: linear-gradient(to bottom, #7b68ee, #6a5acd);
            color: white;
            border: none;
            padding: 12px 6px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Press Start 2P', cursive;
            font-size: 0.7em;
            font-weight: normal;
            transition: all 0.15s ease-in-out; 
            box-shadow: 0 3px 6px rgba(0,0,0,0.2);
            text-shadow: 0 1px 1px rgba(0,0,0,0.3);
            line-height: 1.3;
            text-align: center;
        }
        .controls button:hover, .submit-button:hover, .new-puzzle-button:hover, .clear-button:hover {
            background-image: linear-gradient(to bottom, #8a78ff, #7b68ee);
            box-shadow: 0 5px 8px rgba(0,0,0,0.25);
            transform: translateY(-2px) scale(1.02); 
        }
        .controls button:active, .submit-button:active, .new-puzzle-button:active, .clear-button:active {
            transform: translateY(1px) scale(0.98); 
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .submit-button {
            background-image: linear-gradient(to bottom, #32cd32, #28a428);
            width: 100%;
            padding: 14px 8px;
            font-size: 0.8em;
        }
        .submit-button:hover {
            background-image: linear-gradient(to bottom, #37e037, #2cb82c);
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            width: 100%;
            margin-top: 12px;
        }

        .new-puzzle-button, .clear-button {
            flex-grow: 1;
            font-size: 0.65em;
            padding: 12px 4px;
        }
        .new-puzzle-button {
             background-image: linear-gradient(to bottom, #ff9800, #fb8c00);
        }
        .new-puzzle-button:hover {
            background-image: linear-gradient(to bottom, #ffa726, #ff9800);
        }
         .clear-button {
            background-image: linear-gradient(to bottom, #f44336, #e53935);
        }
        .clear-button:hover {
            background-image: linear-gradient(to bottom, #ef5350, #f44336);
        }

        .message-box {
            margin-top: 15px;
            padding: 12px;
            background-color: #4f555e;
            border-radius: 10px;
            text-align: center;
            font-weight: normal;
            min-height: 24px;
            width: 100%;
            box-sizing: border-box;
            font-size: 0.75em;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
            line-height: 1.4;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out; 
            opacity: 1;
        }
        .message-box.hidden { 
            opacity: 0;
            transform: translateY(10px);
        }


        @media (max-width: 768px) {
            .game-container { padding: 15px; }
            .header-info { margin-bottom: 15px; }
            .score-display, .target-info-placeholder { font-size: 0.75em; padding: 8px 12px; }
            .target-info-placeholder { font-size: 0.65em; }
            .plots-main-area { flex-direction: column; align-items: center; gap: 15px; }
            .main-plot-wrapper { width: 100%; }
            .controls-panel { width: 100%; max-width: 400px; }
            .target-plot-desktop-wrapper { display: none; }
            .target-plot-overlay { display: block; }
            .controls { grid-template-columns: repeat(3, 1fr); }
            .controls button, .submit-button, .new-puzzle-button, .clear-button { font-size: 0.65em; padding: 10px 5px; }
            .submit-button { font-size: 0.75em; padding: 12px 6px;}
            .current-function-display { font-size: 0.7em; }
            .message-box { font-size: 0.7em; margin-top: 15px; }
        }
         @media (max-width: 480px) {
            .target-plot-overlay { width: 80px; height: 80px; top: 50px; right: 10px; }
            .controls button { font-size: 0.6em; padding: 8px 3px; }
            .new-puzzle-button, .clear-button { font-size: 0.55em; }
            .current-function-display { min-height: 35px; font-size: 0.65em; }
            .score-display, .target-info-placeholder { font-size: 0.7em; padding: 6px 10px; }
            .target-info-placeholder { font-size: 0.6em; }
         }

    </style>
</head>
<body>
    <div class="game-container" id="gameContainer">
        <div class="header-info">
            <div class="score-display" id="scoreDisplay">Solved: 0</div>
            <div class="target-info-placeholder" id="targetInfoDisplay">Target: ??? (Steps: ?)</div>
        </div>

        <div class="target-plot-overlay" id="targetPlotOverlay">
            <canvas id="targetCanvasMobile"></canvas>
        </div>

        <div class="plots-main-area">
            <div class="main-plot-wrapper">
                <canvas id="playerCanvas"></canvas>
            </div>
            <div class="controls-panel">
                <div class="target-plot-desktop-wrapper" id="targetPlotDesktopWrapper">
                    <canvas id="targetCanvasDesktop"></canvas>
                </div>
                <div class="current-function-display" id="currentFunctionDisplay">x</div>
                <div class="controls" id="controls">
                </div>
                <button class="submit-button" id="submitButton">Submit</button>
            </div>
        </div>
        
        <div class="action-buttons">
            <button class="new-puzzle-button" id="newPuzzleButton">New Function (ð)</button>
            <button class="clear-button" id="clearButton">Clear</button>
        </div>
        <div class="message-box" id="messageBox">Good Luck!</div>
    </div>

    <script>
        // DOM Elements
        const playerCanvas = document.getElementById('playerCanvas');
        const targetCanvasDesktop = document.getElementById('targetCanvasDesktop');
        const targetCanvasMobile = document.getElementById('targetCanvasMobile');
        // const targetPlotOverlay = document.getElementById('targetPlotOverlay'); // Already declared
        
        const currentFunctionDisplay = document.getElementById('currentFunctionDisplay');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const targetInfoDisplay = document.getElementById('targetInfoDisplay'); 
        const controlsDiv = document.getElementById('controls');
        const submitButton = document.getElementById('submitButton');
        const newPuzzleButton = document.getElementById('newPuzzleButton');
        const clearButton = document.getElementById('clearButton');
        const messageBox = document.getElementById('messageBox');

        const playerCtx = playerCanvas.getContext('2d');
        const targetCtxDesktop = targetCanvasDesktop.getContext('2d');
        const targetCtxMobile = targetCanvasMobile.getContext('2d');

        // Game State
        let score = 0;
        let currentPlayerExpr = 'x';
        let currentTargetFunction = null; // Will store { expr: "...", steps: N }
        let compiledPlayerFunc = math.compile('x');
        let compiledTargetFunc = math.compile('x');
        let usedTargetFunctions = new Set(); // To store expressions of used target functions in the current session
        const MAX_GENERATION_STEPS = 3; // Max operations to apply for dynamic generation (1 to 3 steps)
        const MAX_GENERATION_ATTEMPTS = 50; // Max attempts to find a unique function

        // Plotting Parameters
        const plotRange = { xMin: -5, xMax: 5, yMin: -5, yMax: 5 };
        const plotSamples = 150;

        // Available operations for the player (and for dynamic generation)
        const operations = [
            // Player can reset to 'x'
            { label: 'x', op: () => 'x', type: 'reset' }, 
            // Operations for transforming the current expression
            { label: 'sin', op: (expr) => `sin(${expr})`, type: 'unary_wrap', forGeneration: true },
            { label: 'cos', op: (expr) => `cos(${expr})`, type: 'unary_wrap', forGeneration: true },
            { label: 'abs', op: (expr) => `abs(${expr})`, type: 'unary_wrap', forGeneration: true },
            { label: 'â', op: (expr) => `sqrt(abs(${expr}))`, type: 'unary_wrap', forGeneration: true }, // abs for safety
            { label: '(...)Â²', op: (expr) => `(${expr})^2`, type: 'unary_wrap', forGeneration: true },
            { label: '(...)Â³', op: (expr) => `(${expr})^3`, type: 'unary_wrap', forGeneration: true },
            { label: '-(...)', op: (expr) => `-(${expr})`, type: 'unary_wrap', forGeneration: true },
            // For 1/(...), ensure the expression is not just '0' to avoid immediate 1/0 string.
            // math.js will handle evaluation, but for string representation, this is a bit safer.
            // Using (expr || 'x') is a simple guard, though complex expressions could still evaluate to 0.
            { label: '1/(...)', op: (expr) => `1/(${expr || 'x'})`, type: 'unary_wrap', forGeneration: true },
        ];
        // Filter operations suitable for dynamic generation (i.e., not the 'x' reset)
        const generationOps = operations.filter(op => op.forGeneration);


        function drawAxes(ctx, canvas) {
            const { width, height } = canvas;
            if (width === 0 || height === 0) return;
            const { xMin, xMax, yMin, yMax } = plotRange;
            ctx.clearRect(0, 0, width, height);
            ctx.strokeStyle = '#777'; ctx.lineWidth = 1;
            const yOrigin = height - ((0 - yMin) / (yMax - yMin)) * height;
            ctx.beginPath(); ctx.moveTo(0, yOrigin); ctx.lineTo(width, yOrigin); ctx.stroke();
            const xOrigin = ((0 - xMin) / (xMax - xMin)) * width;
            ctx.beginPath(); ctx.moveTo(xOrigin, 0); ctx.lineTo(xOrigin, height); ctx.stroke();
        }

        function plotFunction(ctx, canvas, compiledFunc, color = '#ff6347') {
            const { width, height } = canvas;
            if (width === 0 || height === 0) return;
            const { xMin, xMax, yMin, yMax } = plotRange;
            drawAxes(ctx, canvas);
            ctx.strokeStyle = color; ctx.lineWidth = 2.5; ctx.lineJoin = 'round'; ctx.lineCap = 'round';
            ctx.beginPath();
            let firstPoint = true;
            for (let i = 0; i <= plotSamples; i++) {
                const xMath = xMin + (i / plotSamples) * (xMax - xMin);
                let yMath;
                try { yMath = compiledFunc.evaluate({ x: xMath }); } catch (e) { yMath = NaN; }
                if (isNaN(yMath) || !isFinite(yMath) || (typeof yMath === 'object' && yMath.isComplex)) {
                    if (!firstPoint) ctx.stroke(); firstPoint = true; continue;
                }
                const clampedYMath = Math.max(yMin -1, Math.min(yMax + 1, yMath)); 
                const xCanvas = (xMath - xMin) / (xMax - xMin) * width;
                const yCanvas = height - ((clampedYMath - yMin) / (yMax - yMin)) * height;
                if (firstPoint) { ctx.moveTo(xCanvas, yCanvas); firstPoint = false; } else { ctx.lineTo(xCanvas, yCanvas); }
            }
            if (!firstPoint) ctx.stroke();
        }
        
        function resizeAndPlotAll() {
            const mainPlotWrapper = playerCanvas.parentElement;
            if (mainPlotWrapper) {
                const newWidth = mainPlotWrapper.clientWidth;
                playerCanvas.width = newWidth;
                playerCanvas.height = Math.max(150, newWidth / (1.6 / 1)) ; 
            }
            const targetDesktopWrapper = targetCanvasDesktop.parentElement;
            if (targetDesktopWrapper && targetDesktopWrapper.clientWidth > 0) { 
                 const newTargetDesktopWidth = targetDesktopWrapper.clientWidth;
                 targetCanvasDesktop.width = newTargetDesktopWidth;
                 targetCanvasDesktop.height = Math.max(100, newTargetDesktopWidth / (1/1));
            }
            const overlayContainer = document.getElementById('targetPlotOverlay'); // Use the overlay div
            if (overlayContainer.clientWidth > 0 && overlayContainer.clientHeight > 0) {
                targetCanvasMobile.width = overlayContainer.clientWidth - 10; 
                targetCanvasMobile.height = overlayContainer.clientHeight - 10;
            }
            
            clearTimeout(window.resizeTimer);
            window.resizeTimer = setTimeout(() => {
                if (compiledPlayerFunc) plotFunction(playerCtx, playerCanvas, compiledPlayerFunc, '#58a6ff'); 
                if (compiledTargetFunc) {
                    plotFunction(targetCtxDesktop, targetCanvasDesktop, compiledTargetFunc, '#f07178'); 
                    plotFunction(targetCtxMobile, targetCanvasMobile, compiledTargetFunc, '#f07178'); 
                }
            }, 50); 
        }

        function updatePlayerFunctionDisplay() {
            currentFunctionDisplay.textContent = currentPlayerExpr;
            try {
                compiledPlayerFunc = math.compile(currentPlayerExpr);
                plotFunction(playerCtx, playerCanvas, compiledPlayerFunc, '#58a6ff');
            } catch (e) {
                console.error("Error compiling player function:", e);
                drawAxes(playerCtx, playerCanvas);
                currentFunctionDisplay.textContent = "Error!";
            }
        }
        
        function animateNewPlot(canvasElement) {
            if (!canvasElement) return;
            canvasElement.classList.add('new-plot-anim');
            setTimeout(() => {
                canvasElement.classList.remove('new-plot-anim');
            }, 300); 
        }

        // Dynamically generates a new target function
        function dynamicallyGenerateTargetFunction() {
            let generatedExpr = 'x';
            let actualSteps = 0;
            // Determine the number of operations to apply (e.g., 1 to MAX_GENERATION_STEPS)
            const numOperationsToApply = Math.floor(Math.random() * MAX_GENERATION_STEPS) + 1;

            let tempExpr = 'x';
            for (let i = 0; i < numOperationsToApply; i++) {
                if (generationOps.length === 0) break; // No operations to apply
                const randomOpIndex = Math.floor(Math.random() * generationOps.length);
                const opToApply = generationOps[randomOpIndex];
                tempExpr = opToApply.op(tempExpr); // Apply the operation
                actualSteps++;
            }
            generatedExpr = tempExpr;
            return { expr: generatedExpr, steps: actualSteps };
        }

        function generateNewTarget() {
            let newFunction;
            let attempts = 0;
            do {
                newFunction = dynamicallyGenerateTargetFunction();
                attempts++;
                // Ensure it's not just 'x' if we intended more steps, and it's unique for the session
            } while ( (newFunction.expr === 'x' && newFunction.steps > 0) || 
                      (usedTargetFunctions.has(newFunction.expr) && attempts < MAX_GENERATION_ATTEMPTS) );
            
            // If max attempts reached and still not unique, allow a repeat or log (for now, allow repeat)
            if (attempts >= MAX_GENERATION_ATTEMPTS && usedTargetFunctions.has(newFunction.expr)) {
                console.warn("Max attempts reached for unique function generation. Allowing repeat.");
            }

            currentTargetFunction = newFunction;
            usedTargetFunctions.add(currentTargetFunction.expr); // Add to used set

            targetInfoDisplay.textContent = `Target: ??? (Steps: ${currentTargetFunction.steps})`; 
            try {
                compiledTargetFunc = math.compile(currentTargetFunction.expr);
                plotFunction(targetCtxDesktop, targetCanvasDesktop, compiledTargetFunc, '#f07178'); 
                plotFunction(targetCtxMobile, targetCanvasMobile, compiledTargetFunc, '#f07178');
                animateNewPlot(targetCanvasDesktop);
                animateNewPlot(targetCanvasMobile);
                animateNewPlot(playerCanvas); 

            } catch (e) {
                console.error("Error compiling target function:", currentTargetFunction.expr, e);
                drawAxes(targetCtxDesktop, targetCanvasDesktop); drawAxes(targetCtxMobile, targetCanvasMobile);
                targetInfoDisplay.textContent = "Target: Error (Steps: ?)";
                // Attempt to generate a fallback simple function if error
                currentTargetFunction = { expr: 'sin(x)', steps: 1 }; // Simple fallback
                compiledTargetFunc = math.compile(currentTargetFunction.expr);
                usedTargetFunctions.add(currentTargetFunction.expr);
                 plotFunction(targetCtxDesktop, targetCanvasDesktop, compiledTargetFunc, '#f07178'); 
                plotFunction(targetCtxMobile, targetCanvasMobile, compiledTargetFunc, '#f07178');
            }
            updateMessageBox("Guess this function!");
        }

        function updateScore() {
            scoreDisplay.textContent = `Solved: ${score}`;
            scoreDisplay.classList.add('updated');
            setTimeout(() => {
                scoreDisplay.classList.remove('updated');
            }, 300); 
        }
        
        function updateMessageBox(message) {
            messageBox.classList.add('hidden'); 
            setTimeout(() => {
                messageBox.textContent = message;
                messageBox.classList.remove('hidden'); 
            }, 150); 
        }

        function checkSolution() {
            if (!compiledPlayerFunc || !compiledTargetFunc || !currentTargetFunction) {
                updateMessageBox("Function error."); return;
            }
            const normalizeExpr = (expr) => expr.replace(/\s+/g, '').toLowerCase();
            if (normalizeExpr(currentPlayerExpr) === normalizeExpr(currentTargetFunction.expr)) {
                 score++; 
                 updateScore(); 
                 updateMessageBox("Congratulations! Perfect Match!");
                currentPlayerExpr = 'x'; updatePlayerFunctionDisplay(); generateNewTarget(); return;
            }
            let matchCount = 0; let validPoints = 0; const tolerance = 0.2;
            for (let i = 0; i <= plotSamples; i++) {
                const x = plotRange.xMin + (i / plotSamples) * (plotRange.xMax - plotRange.xMin);
                let yPlayer, yTarget;
                try { yPlayer = compiledPlayerFunc.evaluate({ x: x }); } catch { yPlayer = NaN; }
                try { yTarget = compiledTargetFunc.evaluate({ x: x }); } catch { yTarget = NaN; }
                if (!isNaN(yPlayer) && isFinite(yPlayer) && !isNaN(yTarget) && isFinite(yTarget)) {
                    validPoints++; if (Math.abs(yPlayer - yTarget) < tolerance) matchCount++;
                } else if ( (isNaN(yPlayer) || !isFinite(yPlayer)) && (isNaN(yTarget) || !isFinite(yTarget)) ) {
                    validPoints++; matchCount++;
                }
            }
            if (validPoints < plotSamples * 0.70) { 
                 updateMessageBox("Try again! Functions differ significantly."); return;
            }
            if (validPoints > 0 && (matchCount / validPoints) > 0.93) {
                score++; 
                updateScore(); 
                updateMessageBox("Congratulations! Correct Function!");
                currentPlayerExpr = 'x'; updatePlayerFunctionDisplay(); generateNewTarget();
            } else {
                updateMessageBox("Not quite. Try again!");
            }
        }

        function initializeControls() {
            controlsDiv.innerHTML = '';
            // Use all operations for player controls, including 'x' reset
            operations.forEach(opInfo => {
                const button = document.createElement('button');
                button.textContent = opInfo.label; button.title = `Apply: ${opInfo.label}`;
                button.addEventListener('click', () => {
                    if (opInfo.type === 'reset') currentPlayerExpr = opInfo.op();
                    else if (opInfo.type === 'unary_wrap') {
                        if (currentPlayerExpr.length > 45) { // Increased max length slightly
                            updateMessageBox("Function is too complex!"); return;
                        }
                        currentPlayerExpr = opInfo.op(currentPlayerExpr);
                    }
                    updatePlayerFunctionDisplay();
                });
                controlsDiv.appendChild(button);
            });
        }
        
        function initGame() {
            score = 0; 
            scoreDisplay.textContent = `Solved: ${score}`; 
            currentPlayerExpr = 'x';
            usedTargetFunctions.clear(); // Clear used functions on new game init
            initializeControls();
            setTimeout(() => {
                resizeAndPlotAll(); 
                updatePlayerFunctionDisplay(); 
                generateNewTarget(); 
            }, 50); 
            submitButton.addEventListener('click', checkSolution);
            newPuzzleButton.addEventListener('click', () => {
                generateNewTarget(); currentPlayerExpr = 'x'; updatePlayerFunctionDisplay();
            });
            clearButton.addEventListener('click', () => {
                currentPlayerExpr = 'x'; updatePlayerFunctionDisplay();
                updateMessageBox("Input reset to 'x'.");
            });
            window.addEventListener('resize', resizeAndPlotAll); 
        }

        document.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>
